import streamlit as st
import pandas as pd
import numpy as np
from prophet import Prophet
from prophet.plot import plot_plotly, plot_components_plotly
import plotly.graph_objects as go
import loaddata as ld
import warnings
import buildmodel as bm
from scipy.stats import gaussian_kde
import matplotlib.pyplot as plt
from plotly.subplots import make_subplots
from arch import arch_model

warnings.filterwarnings("ignore")




# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="ExRate - Model",
    page_icon="üìà",
    layout="wide"
)


# --- Sidebar ---
st.sidebar.image("images/exchange-rate.png", width=150)
st.sidebar.markdown("### 1. Data")

# --- T·∫£i d·ªØ li·ªáu m·∫´u ---
@st.cache_data
def get_data():
    return ld.loadData()
# Hi·ªÉn th·ªã loading khi t·∫£i d·ªØ li·ªáu
with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
    df = get_data()

with st.sidebar.expander("Dataset"):
    st.write("T·∫£i l√™n t·∫≠p d·ªØ li·ªáu ho·∫∑c s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u (Hi√™n t·∫°i ch·ªâ h·ªó tr·ª£ ph√¢n t√≠ch d·ªØ li·ªáu theo ng√†y). Ch√∫ √Ω: D·ªØ li·ªáu ph·∫£i c√≥ c·ªôt 'date' v√† 'USDVND'.")
    uploaded_file = st.file_uploader("Ch·ªçn file CSV", type="csv")
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            st.success("ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i file: {e}")

# C√°c m·ª•c kh√°c trong sidebar c√≥ th·ªÉ th√™m v√†o:
st.sidebar.markdown("### 2. Modelling")
# st.sidebar.slider("Prior scale", min_value=0.01, max_value=10.0, value=0.5)
# st.sidebar.selectbox("Seasonalities", ["auto", "daily", "weekly", "yearly"])

# --- Main content ---
st.title("M√¥ h√¨nh d·ª± b√°o t·ª∑ gi√° h·ªëi ƒëo√°i USD/VND")

st.markdown("## 1. Tr·ª±c quan ho√° d·ªØ li·ªáu")
st.markdown("D·ªØ li·ªáu t·ª∑ gi√° h·ªëi ƒëo√°i USD/VND t·ª´ 2019 ƒë·∫øn nay ƒë∆∞·ª£c thu th·∫≠p t·ª´ Yahoo Finance. ")
# V·∫Ω bi·ªÉu ƒë·ªì ƒë∆∞·ªùng t·ª∑ gi√° h·ªëi ƒëo√°i USD/VND
fig = go.Figure()
fig.add_trace(go.Scatter(x=df['date'], y=df['USDVND'], mode='lines', name='USD/VND'))
fig.update_layout(title='T·ª∑ gi√° h·ªëi ƒëo√°i USD/VND theo ng√†y', xaxis_title='', yaxis_title='T·ª∑ gi√° (VND)')
st.plotly_chart(fig, use_container_width=True)

# Hi·ªÉn th·ªã m√¥ t·∫£ th·ªëng k√™ c·ªßa d·ªØ li·ªáu, cƒÉn ch·ªânh b·∫£ng v√† ti√™u ƒë·ªÅ cho ƒë·∫πp
st.markdown("### M√¥ t·∫£ th·ªëng k√™ d·ªØ li·ªáu")
st.dataframe(df.describe().transpose(), use_container_width=True)

# --- 2. T√≠nh to√°n l·ª£i su·∫•t Logarithmic ---
st.markdown("## 2. Ph√¢n t√≠ch l·ª£i su·∫•t Logarithmic")
df = bm.calculate_log_returns(df)
col1, col2 = st.columns(2)
# --- Bi·ªÉu ƒë·ªì 1: L·ª£i su·∫•t Logarithmic theo th·ªùi gian (Column 1) ---
with col1:
    st.subheader("L·ª£i su·∫•t Logarithmic c·ªßa USD/VND theo th·ªùi gian")
    fig1 = go.Figure()
    fig1.add_trace(
        go.Scatter(x=df['date'], y=df['log_return'], mode='lines', name='L·ª£i su·∫•t Log', line=dict(color='blue'))
    )
    fig1.update_layout(
        xaxis_title="",
        yaxis_title="L·ª£i su·∫•t Logarithmic",
        height=400,
        margin=dict(l=40, r=20, t=40, b=40), # ƒêi·ªÅu ch·ªânh l·ªÅ
        xaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGrey'),
        yaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGrey')
    )
    st.plotly_chart(fig1, use_container_width=True)

# --- Bi·ªÉu ƒë·ªì 2: Ph√¢n ph·ªëi l·ª£i su·∫•t Logarithmic (Column 2) ---
with col2:
    st.subheader("Ph√¢n ph·ªëi l·ª£i su·∫•t Logarithmic")
    fig2 = go.Figure()

    # Histogram Trace
    hist_trace = go.Histogram(
        x=df['log_return'],
        nbinsx=50,
        name='L·ª£i su·∫•t Log',
        marker_color='lightblue',
        opacity=0.8,
        histnorm='probability density',
        showlegend=False
    )
    fig2.add_trace(hist_trace)

    # T√≠nh to√°n v√† th√™m KDE Trace
    x_kde = np.linspace(df['log_return'].min(), df['log_return'].max(), 500)
    kde = gaussian_kde(df['log_return'])
    kde_y = kde(x_kde)

    kde_trace = go.Scatter(
        x=x_kde,
        y=kde_y,
        mode='lines',
        name='KDE',
        line=dict(color='red', dash='dash', width=2),
        showlegend=False
    )
    fig2.add_trace(kde_trace)

    fig2.update_layout(
        xaxis_title="",
        yaxis_title="",
        height=400,
        margin=dict(l=40, r=20, t=40, b=40), # ƒêi·ªÅu ch·ªânh l·ªÅ
        xaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGrey'),
        yaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGrey')
    )
    st.plotly_chart(fig2, use_container_width=True)

# --------------- X√¢y d·ª±ng m√¥ h√¨nh d·ª± b√°o t·ª∑ gi√° h·ªëi ƒëo√°i ----------------------
st.markdown("## 3. D·ª± b√°o t·ª∑ gi√° h·ªëi ƒëo√°i USD/VND")

col3, col4 = st.columns(2)

with col3:
    # Widget ch·ªçn kho·∫£ng th·ªùi gian d·ª± b√°o trong c·ªôt 1
    forecast_period = st.slider(
        "Ch·ªçn kho·∫£ng th·ªùi gian d·ª± b√°o (ng√†y)",
        min_value=1,
        max_value=365,
        value=30
    )
    
    # commbox ch·ªçn ph√¢n ph·ªëi cho m√¥ h√¨nh GARCH
    distribution = st.selectbox(
        "Ch·ªçn ph√¢n ph·ªëi cho m√¥ h√¨nh GARCH",
        options=["Normal", "Student's t", "Skewed Student's t"],
        index=0  # M·∫∑c ƒë·ªãnh ch·ªçn Normal
    )
    # Ch·ªçn lo·∫°i m√¥ h√¨nh ARCH, GARCH, EGARCH, TARCH
    model_type = st.selectbox(
        "Ch·ªçn lo·∫°i m√¥ h√¨nh ARCH/GARCH",
        options=["ARCH", "GARCH", "EGARCH", "TARCH"],
        index=1  # M·∫∑c ƒë·ªãnh ch·ªçn GARCH
    )
with col4:
    # Th√™m radio button ƒë·ªÉ ch·ªçn t√¨m m√¥ h√¨nh hi·ªáu qu·∫£ nh·∫•t ho·∫∑c manually ch·ªçn m√¥ h√¨nh. N·∫øu ch·ªçn manually th√¨ s·∫Ω hi·ªán ra √¥ nh·∫≠p gi√° tr·ªã p, q
    model_selection = st.radio(
        "Ch·ªçn c√°ch x√¢y d·ª±ng m√¥ h√¨nh",
        options=["T·ª± ƒë·ªông t√¨m m√¥ h√¨nh t·ªët nh·∫•t", "T√πy ch·ªânh m√¥ h√¨nh"],
        index=1  # M·∫∑c ƒë·ªãnh ch·ªçn T·ª± ƒë·ªông t√¨m m√¥ h√¨nh t·ªët nh·∫•t
    )
    # N·∫øu ch·ªçn "Ch·ªçn m√¥ h√¨nh theo p, q" th√¨ hi·ªÉn th·ªã √¥ nh·∫≠p lo·∫°i m√¥ h√¨nh v√† gi√° tr·ªã p, q
    if model_selection == "T√πy ch·ªânh m√¥ h√¨nh":
        p = st.number_input("Nh·∫≠p gi√° tr·ªã p (0-3)", min_value=0, max_value=3, value=1)
        q = st.number_input("Nh·∫≠p gi√° tr·ªã q (0-3)", min_value=0, max_value=3, value=1)


if model_selection == "T·ª± ƒë·ªông t√¨m m√¥ h√¨nh t·ªët nh·∫•t":
    # T·ª± ƒë·ªông t√¨m m√¥ h√¨nh t·ªët nh·∫•t
    with st.spinner("ƒêang t√¨m m√¥ h√¨nh t·ªët nh·∫•t..."):
        best_model, best_params = bm.find_best_garch_model(df['log_return'], model_type, distribution, forecast_period)
        if best_model is None:
            st.error("Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh GARCH ph√π h·ª£p.")
        else:
            st.success(f"ƒê√£ t√¨m th·∫•y m√¥ h√¨nh t·ªët nh·∫•t v·ªõi tham s·ªë (p,q) = {best_params}")
   
else:
    # T·∫°o m√¥ h√¨nh v·ªõi c√°c tham s·ªë t√πy ch·ªânh
    with st.spinner("ƒêang x√¢y d·ª±ng m√¥ h√¨nh v·ªõi tham s·ªë t√πy ch·ªânh..."):
        if model_type == "ARCH":
            vol = 'Arch'
        elif model_type == "GARCH":
            vol = 'Garch'
        elif model_type == "EGARCH":
            vol = 'EGarch'
        elif model_type == "TARCH":
            vol = 'Tarch'
        if distribution == "Normal":
            dist = 'normal'
        elif distribution == "Student's t":
            dist = 't'
        elif distribution == "Skewed Student's t":
            dist = 'skewt'
        try:
            best_model = arch_model(df['log_return'], vol=vol, p=p, q=q, dist=dist)
            best_model = best_model.fit(disp='off')
            st.success(f"ƒê√£ x√¢y d·ª±ng m√¥ h√¨nh v·ªõi tham s·ªë (p,q) = ({p},{q})")
        except Exception as e:
            st.error(f"L·ªói khi x√¢y d·ª±ng m√¥ h√¨nh: {e}")
            best_model = None
if best_model is not None:
    #Hi·ªÉn th·ªã th√¥ng tin m√¥ h√¨nh
    st.write(best_model.summary())
    col9, col0 = st.columns(2)
    with col9:
        st.markdown("### Th√¥ng tin m√¥ h√¨nh GARCH")
        st.write(f"M√¥ h√¨nh: {best_model.model.__class__.__name__}")
        st.write(f"AIC: {best_model.aic:.2f}")
        st.write(f"BIC: {best_model.bic:.2f}")
        st.write(f"Log-Likelihood: {best_model.loglikelihood:.2f}")
    with col0:
        fig_garch = best_model.plot(annualize='D')
        st.pyplot(fig_garch)

    #Chia l√†m 2 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± b√°o
    col5, col6 = st.columns(2)
    with col5:
            # ki·ªÉm ƒë·ªãnh ph·∫ßn d∆∞ c·ªßa m√¥ h√¨nh
        residuals = best_model.resid
        st.subheader("Ki·ªÉm ƒë·ªãnh ph·∫ßn d∆∞ c·ªßa m√¥ h√¨nh")
        fig_residuals = go.Figure()
        fig_residuals.add_trace(go.Scatter(
            x=df['date'],
            y=residuals,
            mode='lines',
            name='Ph·∫ßn d∆∞',
            line=dict(color='blue')
        ))
        fig_residuals.update_layout(
            title='',
            xaxis_title='',
            yaxis_title='Ph·∫ßn d∆∞',
            height=400,
            margin=dict(l=40, r=20, t=40, b=40),  # ƒêi·ªÅu ch·ªânh l·ªÅ
            xaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGrey'),
            yaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGrey')
        )
        st.plotly_chart(fig_residuals, use_container_width=True)
    with col6:
        # Hi·ªÉn th·ªã ph√¢n ph·ªëi ph·∫ßn d∆∞
        st.subheader("Ph√¢n ph·ªëi ph·∫ßn d∆∞ c·ªßa m√¥ h√¨nh")
        fig_residuals_dist = go.Figure()
        fig_residuals_dist.add_trace(go.Histogram(
            x=residuals,
            nbinsx=50,
            name='Ph·∫ßn d∆∞',
            marker_color='lightblue',
            opacity=0.8,
            histnorm='probability density',
            showlegend=False
        ))
        # T√≠nh to√°n v√† th√™m KDE Trace
        x_kde = np.linspace(residuals.min(), residuals.max(), 500)
        kde = gaussian_kde(residuals)
        kde_y = kde(x_kde)
        kde_trace = go.Scatter(
            x=x_kde,
            y=kde_y,
            mode='lines',
            name='KDE',
            line=dict(color='red', dash='dash', width=2),
            showlegend=False
        )
        fig_residuals_dist.add_trace(kde_trace)
        fig_residuals_dist.update_layout(
            xaxis_title='',
            yaxis_title='',
            height=400,
            margin=dict(l=40, r=20, t=40, b=40),  # ƒêi·ªÅu ch·ªânh l·ªÅ
            xaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGrey'),
            yaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGrey')
        )
        st.plotly_chart(fig_residuals_dist, use_container_width=True)
    if model_type != "EGARCH":
        # D·ª± b√°o v·ªõi m√¥ h√¨nh t·ªët nh·∫•t
        forecast = best_model.forecast(horizon=forecast_period)
        conditional_variance_forecast = forecast.variance.iloc[-1]
        volatility_forecast = np.sqrt(conditional_variance_forecast)
        st.subheader("D·ª± b√°o bi·∫øn ƒë·ªông t·ª∑ gi√° trong t∆∞∆°ng lai")
        # --- 2. D·ª± b√°o gi√° tr·ªã (L·ª£i su·∫•t v√† T·ª∑ gi√°) ---
        # D·ª± b√°o l·ª£i su·∫•t (mean forecast)
        mean_forecast = forecast.mean.iloc[-1]
        # T√≠nh gi√° tr·ªã t·ª∑ gi√° d·ª± b√°o
        # Gi√° t·ª∑ gi√° cu·ªëi c√πng t·ª´ d·ªØ li·ªáu g·ªëc
        last_price = df['USDVND'].iloc[-1]
        last_date = df["date"].iloc[-1] 
            # 'B' l√† t·∫ßn s·ªë ng√†y l√†m vi·ªác (business day)
        forecast_dates = pd.date_range(start=last_date, periods=forecast_period + 1, freq='B')[1:]

        # T·∫°o DataFrame ƒë·ªÉ l∆∞u tr·ªØ gi√° d·ª± b√°o
        forecasted_prices = pd.DataFrame(index=forecast_dates) # G√°n index ng√†y th√°ng ngay l·∫≠p t·ª©c
        forecasted_prices['Forecasted_USDVND'] = np.nan
        # th√™m c·ªôt bi·∫øn ƒë·ªông d·ª± b√°o
        forecasted_prices['Forecasted_Volatility'] = np.nan
        current_forecast_price = last_price

        for i, log_return_pred in enumerate(mean_forecast.values):
            current_forecast_price = current_forecast_price * np.exp(log_return_pred)
            forecasted_prices.iloc[i, 1] = volatility_forecast[i]
            forecasted_prices.iloc[i, 0] = current_forecast_price
            

        # t·∫°o 2 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã gi√° tr·ªã d·ª± b√°o v√† v·∫Ω bi·ªÉu ƒë·ªì
        col7, col8 = st.columns(2)

        with col7:
            st.write(f"Gi√° t·ª∑ gi√° USD/VND d·ª± b√°o trong {forecast_period} ng√†y t·ªõi:")
            st.dataframe(forecasted_prices)
        with col8:
            st.write("")
        # c·∫Øt b·ªõt d·ªØ li·ªáu df 1 nƒÉm g·∫ßn nh·∫•t ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
        df = df[df['date'] >= (df['date'].max() - pd.DateOffset(years=1))]
        # V·∫Ω bi·ªÉu ƒë·ªì t·ª∑ gi√° l·ªãch s·ª≠ v√† t·ª∑ gi√° d·ª± b√°o v·ªõi t·ª∑ gi√° d·ª± b√°o n√©t ƒë·ª©t
        st.subheader("Bi·ªÉu ƒë·ªì t·ª∑ gi√° USD/VND d·ª± b√°o")
        fig_forecast = go.Figure()
        fig_forecast.add_trace(go.Scatter(
            x=df['date'],
            y=df['USDVND'],
            mode='lines',
            name='T·ª∑ gi√° USD/VND l·ªãch s·ª≠',
            line=dict(color='blue')
        ))
        fig_forecast.add_trace(go.Scatter(
            x=forecasted_prices.index,
            y=forecasted_prices['Forecasted_USDVND'],
            mode='lines',
            name='T·ª∑ gi√° USD/VND d·ª± b√°o',
            line=dict(color='red', dash='dash')
        ))
        fig_forecast.update_layout(
            title='T·ª∑ gi√° USD/VND l·ªãch s·ª≠ v√† d·ª± b√°o',
            xaxis_title='Ng√†y',
            yaxis_title='T·ª∑ gi√° (VND)',
            height=400,
            margin=dict(l=40, r=20, t=40, b=40),  # ƒêi·ªÅu ch·ªânh l·ªÅ
            xaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGrey'),
            yaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGrey')
        )
        st.plotly_chart(fig_forecast, use_container_width=True)