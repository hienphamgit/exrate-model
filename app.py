import streamlit as st
import pandas as pd
import numpy as np
from prophet import Prophet
from prophet.plot import plot_plotly, plot_components_plotly
import plotly.graph_objects as go


# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="ExRate - Model",
    page_icon="üìà",
    layout="wide"
)


# --- Sidebar ---
st.sidebar.image("images/exchange-rate.png", width=150)
st.sidebar.markdown("### 1. Data")

# --- T·∫£i d·ªØ li·ªáu m·∫´u ---
@st.cache_data
def load_sample_data():
    # T·∫°o d·ªØ li·ªáu gi·∫£ ƒë·ªãnh cho v√≠ d·ª•
    # Trong th·ª±c t·∫ø, b·∫°n s·∫Ω t·∫£i d·ªØ li·ªáu t·ª´ file CSV, database, v.v.
    dates = pd.date_range(start='2017-01-01', periods=365*3, freq='D')
    sales = (
        100
        + 5 * np.sin(np.linspace(0, 30, len(dates))) * 10
        + np.random.normal(0, 5, len(dates))
        + np.linspace(0, 50, len(dates)) # xu h∆∞·ªõng tƒÉng
        + 20 * np.sin(np.linspace(0, 100, len(dates))) # seasonality
    ).astype(int)
    
    df = pd.DataFrame({'ds': dates, 'y': sales})
    return df

df = load_sample_data()

with st.sidebar.expander("Dataset"):
    st.write("T·∫£i l√™n t·∫≠p d·ªØ li·ªáu c·ªßa b·∫°n ho·∫∑c s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u.")
    uploaded_file = st.file_uploader("Ch·ªçn file CSV", type="csv")
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            st.success("ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i file: {e}")

# C√°c m·ª•c kh√°c trong sidebar c√≥ th·ªÉ th√™m v√†o:
st.sidebar.markdown("### 2. Modelling")
# st.sidebar.slider("Prior scale", min_value=0.01, max_value=10.0, value=0.5)
# st.sidebar.selectbox("Seasonalities", ["auto", "daily", "weekly", "yearly"])

# --- Main content ---
st.title("ExRate Model")

st.markdown("### What is this app?")
st.checkbox("Launch forecast", value=True)
st.checkbox("Track experiments")

st.markdown("## 1. Overview")
st.markdown("More info on this plot")

# T·∫°o m√¥ h√¨nh Prophet v√† d·ª± b√°o
m = Prophet(seasonality_mode='multiplicative')
m.fit(df)

future = m.make_future_dataframe(periods=365) # D·ª± b√°o 1 nƒÉm ti·∫øp theo
forecast = m.predict(future)

# Bi·ªÉu ƒë·ªì d·ª± b√°o
fig = plot_plotly(m, forecast)

# Th√™m ch√∫ th√≠ch cho ƒëi·ªÉm d·ªØ li·ªáu c·ª• th·ªÉ (nh∆∞ trong ·∫£nh m·∫´u)
# ·ªû ƒë√¢y ta s·∫Ω th√™m m·ªôt ƒëi·ªÉm ch√∫ th√≠ch gi·∫£ ƒë·ªãnh ƒë·ªÉ minh h·ªça
# B·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh ƒë·ªÉ l·∫•y d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ forecast ho·∫∑c df
if not df.empty:
    sample_date = pd.to_datetime('2018-11-21') # Gi·∫£ ƒë·ªãnh m·ªôt ng√†y ƒë·ªÉ ch√∫ th√≠ch
    # T√¨m gi√° tr·ªã g·∫ßn nh·∫•t trong d·ªØ li·ªáu th·ª±c t·∫ø
    actual_data_on_sample_date = df[df['ds'] == sample_date]
    
    if not actual_data_on_sample_date.empty:
        # L·∫•y gi√° tr·ªã y (sales) t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø
        actual_y = actual_data_on_sample_date['y'].iloc[0]
        
        # Th√™m m·ªôt annotation cho ƒëi·ªÉm n√†y
        fig.add_trace(go.Scatter(
            x=[sample_date],
            y=[actual_y],
            mode='markers+text',
            text=[f"Nov 21, 2018, {actual_y} sales"],
            textposition="top center",
            marker=dict(size=10, color='red'),
            name="Sample Point"
        ))

st.plotly_chart(fig, use_container_width=True)

st.markdown("## 2. Forecast Components")
st.markdown("More info on these plots")
# Bi·ªÉu ƒë·ªì th√†nh ph·∫ßn d·ª± b√°o (trend, weekly, yearly)
fig_components = plot_components_plotly(m, forecast)
st.plotly_chart(fig_components, use_container_width=True)

# Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu (t√πy ch·ªçn)
st.markdown("## 3. Raw Data")
st.dataframe(df.tail())
st.markdown("## 4. Forecast Data")
st.dataframe(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail())