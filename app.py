import streamlit as st
import pandas as pd
import numpy as np
from prophet import Prophet
from prophet.plot import plot_plotly, plot_components_plotly
import plotly.graph_objects as go
import loaddata as ld
import warnings
import buildmodel as bm
from scipy.stats import gaussian_kde
import matplotlib.pyplot as plt
from plotly.subplots import make_subplots
from arch import arch_model

warnings.filterwarnings("ignore")




# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="ExRate - Model",
    page_icon="üìà",
    layout="wide"
)


# --- Sidebar ---
st.sidebar.image("images/exchange-rate.png", width=150)
st.sidebar.markdown("### 1. Data")

# --- T·∫£i d·ªØ li·ªáu m·∫´u ---
@st.cache_data
def get_data():
    return ld.loadData()
df = get_data()

with st.sidebar.expander("Dataset"):
    st.write("T·∫£i l√™n t·∫≠p d·ªØ li·ªáu c·ªßa b·∫°n ho·∫∑c s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u.")
    uploaded_file = st.file_uploader("Ch·ªçn file CSV", type="csv")
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            st.success("ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i file: {e}")

# C√°c m·ª•c kh√°c trong sidebar c√≥ th·ªÉ th√™m v√†o:
st.sidebar.markdown("### 2. Modelling")
# st.sidebar.slider("Prior scale", min_value=0.01, max_value=10.0, value=0.5)
# st.sidebar.selectbox("Seasonalities", ["auto", "daily", "weekly", "yearly"])

# --- Main content ---
st.title("M√¥ h√¨nh d·ª± b√°o t·ª∑ gi√° h·ªëi ƒëo√°i USD/VND")

st.markdown("## 1. Tr·ª±c quan ho√° d·ªØ li·ªáu")
st.markdown("D·ªØ li·ªáu t·ª∑ gi√° h·ªëi ƒëo√°i USD/VND t·ª´ 2019 ƒë·∫øn nay.")
# V·∫Ω bi·ªÉu ƒë·ªì ƒë∆∞·ªùng t·ª∑ gi√° h·ªëi ƒëo√°i USD/VND
fig = go.Figure()
fig.add_trace(go.Scatter(x=df['date'], y=df['USDVND'], mode='lines', name='USD/VND'))
fig.update_layout(title='T·ª∑ gi√° h·ªëi ƒëo√°i USD/VND theo ng√†y', xaxis_title='', yaxis_title='T·ª∑ gi√° (VND)')
st.plotly_chart(fig, use_container_width=True)

# Hi·ªÉn th·ªã m√¥ t·∫£ th·ªëng k√™ c·ªßa d·ªØ li·ªáu, cƒÉn ch·ªânh b·∫£ng v√† ti√™u ƒë·ªÅ cho ƒë·∫πp
st.markdown("### M√¥ t·∫£ th·ªëng k√™ d·ªØ li·ªáu")
st.dataframe(df.describe().transpose(), use_container_width=True)

# --- 2. T√≠nh to√°n l·ª£i su·∫•t Logarithmic ---
st.markdown("## 2. Ph√¢n t√≠ch l·ª£i su·∫•t Logarithmic")
df = bm.calculate_log_returns(df)
# --- 1. T·∫°o Subplots Figure ---
# T·∫°o m·ªôt figure v·ªõi 1 d√≤ng v√† 2 c·ªôt
fig = make_subplots(rows=1, cols=2,
                    subplot_titles=('L·ª£i su·∫•t Logarithmic c·ªßa USD/VND theo th·ªùi gian', 'Ph√¢n ph·ªëi l·ª£i su·∫•t Logarithmic'),
                    horizontal_spacing=0.15) # ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch ngang gi·ªØa c√°c bi·ªÉu ƒë·ªì

# --- 2. Th√™m Bi·ªÉu ƒë·ªì L·ª£i su·∫•t Logarithmic (tr√°i) ---
fig.add_trace(
    go.Scatter(x=df['date'], y=df['log_return'], mode='lines', name='L·ª£i su·∫•t Log'),
    row=1, col=1 # ƒê·∫∑t v√†o h√†ng 1, c·ªôt 1
)
# --- 3. Th√™m Bi·ªÉu ƒë·ªì Ph√¢n ph·ªëi (Histogram + KDE) (ph·∫£i) ---

# Histogram Trace cho bi·ªÉu ƒë·ªì ph√¢n ph·ªëi
hist_trace = go.Histogram(
    x=df['log_return'],
    nbinsx=50,
    name='L·ª£i su·∫•t Log',
    marker_color='lightblue',
    opacity=0.8,
    histnorm='probability density', # Chu·∫©n h√≥a histogram v·ªÅ m·∫≠t ƒë·ªô ƒë·ªÉ kh·ªõp v·ªõi KDE
    showlegend=False # Kh√¥ng hi·ªÉn th·ªã ch√∫ gi·∫£i cho histogram trong subplot n√†y
)
fig.add_trace(hist_trace, row=1, col=2) # ƒê·∫∑t v√†o h√†ng 1, c·ªôt 2

# T√≠nh to√°n v√† th√™m KDE Trace
x_kde = np.linspace(df['log_return'].min(), df['log_return'].max(), 500)
kde = gaussian_kde(df['log_return'])
kde_y = kde(x_kde)

kde_trace = go.Scatter(
    x=x_kde,
    y=kde_y,
    mode='lines',
    name='KDE',
    line=dict(color='red', dash='dash', width=2),
    showlegend=False # Kh√¥ng hi·ªÉn th·ªã ch√∫ gi·∫£i cho KDE trong subplot n√†y
)
fig.add_trace(kde_trace, row=1, col=2) # ƒê·∫∑t v√†o h√†ng 1, c·ªôt 2

# --- 4. C·∫≠p nh·∫≠t Layout c·ªßa Bi·ªÉu ƒë·ªì t·ªïng th·ªÉ ---
fig.update_layout(
    title_text='Ph√¢n t√≠ch L·ª£i su·∫•t Logarithmic',
    height=500, # Chi·ªÅu cao t·ªïng th·ªÉ c·ªßa figure
    # C·∫≠p nh·∫≠t nh√£n tr·ª•c cho subplot ƒë·∫ßu ti√™n (L·ª£i su·∫•t Logarithmic)
    xaxis=dict(title_text='', showgrid=True, gridwidth=1, gridcolor='LightGrey'),
    yaxis=dict(title_text='L·ª£i su·∫•t Logarithmic', showgrid=True, gridwidth=1, gridcolor='LightGrey'),
    # C·∫≠p nh·∫≠t nh√£n tr·ª•c cho subplot th·ª© hai (Ph√¢n ph·ªëi)
    xaxis2=dict(title_text='', showgrid=True, gridwidth=1, gridcolor='LightGrey'), # xaxis2 cho subplot th·ª© 2
    yaxis2=dict(title_text='', showgrid=True, gridwidth=1, gridcolor='LightGrey') # yaxis2 cho subplot th·ª© 2
)

# --- 5. Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit ---
st.plotly_chart(fig, use_container_width=True)

# X√¢y d·ª±ng m√¥ h√¨nh d·ª± b√°o t·ª∑ gi√° h·ªëi ƒëo√°i b·∫±ng Garch
st.markdown("## 3. D·ª± b√°o t·ª∑ gi√° h·ªëi ƒëo√°i USD/VND")

col1, col2 = st.columns(2)

with col1:
    # Widget ch·ªçn kho·∫£ng th·ªùi gian d·ª± b√°o trong c·ªôt 1
    forecast_period = st.slider(
        "Ch·ªçn kho·∫£ng th·ªùi gian d·ª± b√°o (ng√†y)",
        min_value=1,
        max_value=365,
        value=30
    )
    # Th√™m radio button ƒë·ªÉ ch·ªçn t√¨m m√¥ h√¨nh hi·ªáu qu·∫£ nh·∫•t ho·∫∑c manually ch·ªçn m√¥ h√¨nh. N·∫øu ch·ªçn manually th√¨ s·∫Ω hi·ªán ra c√°c l·ª±a ch·ªçn m√¥ h√¨nh GARCH
    model_type = st.radio(
        "Ch·ªçn m√¥ h√¨nh GARCH",
        options=["T·ª± ƒë·ªông t√¨m m√¥ h√¨nh t·ªët nh·∫•t", "GARCH(1, 1)", "GARCH(1, 2)", "GARCH(2, 1)", "GARCH(2, 2)"],
        index=0,  # M·∫∑c ƒë·ªãnh ch·ªçn "T·ª± ƒë·ªông t√¨m m√¥ h√¨nh t·ªët nh·∫•t"
        horizontal=True
    )

# X√¢y d·ª±ng m√¥ h√¨nh GARCH
if model_type == "T·ª± ƒë·ªông t√¨m m√¥ h√¨nh t·ªët nh·∫•t":
    # T·ª± ƒë·ªông t√¨m m√¥ h√¨nh GARCH t·ªët nh·∫•t b·∫±ng v√≤ng l·∫∑p
    best_aic = np.inf
    best_model = None
    for p in range(1, 3):  # Th·ª≠ p = 1
        for q in range(1, 3):
            try:
                model = arch_model(df['log_return'], vol='Garch', p=p, q=q, dist='t')
                model_fit = model.fit(disp="off")
                if model_fit.aic < best_aic:
                    best_aic = model_fit.aic
                    best_model = model_fit
            except Exception as e:
                st.error(f"L·ªói khi x√¢y d·ª±ng m√¥ h√¨nh GARCH({p}, {q}): {e}")
                continue
    if best_model is not None:
        st.success(f"ƒê√£ t√¨m th·∫•y m√¥ h√¨nh GARCH t·ªët nh·∫•t: {best_model.model.__class__.__name__} v·ªõi AIC = {best_aic:.2f}")
        model_fit = best_model    
else:
    # Ch·ªçn m√¥ h√¨nh GARCH theo l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
    p, q = 1, 1
    if model_type == "GARCH(1, 2)":
        p, q = 1, 2
    elif model_type == "GARCH(2, 1)":
        p, q = 2, 1
    elif model_type == "GARCH(2, 2)":
        p, q = 2, 2
    model = arch_model(df['log_return'], vol='Garch', p=p, q=q)
    model_fit = model.fit(disp="off")
# Hi·ªÉn th·ªã th√¥ng tin m√¥ h√¨nh v√†o c·ªôt 2
with col2:
    st.markdown("### Th√¥ng tin m√¥ h√¨nh GARCH")
    st.write(f"M√¥ h√¨nh: {model_fit.model.__class__.__name__}")
    st.write(f"AIC: {model_fit.aic:.2f}")
    st.write(f"BIC: {model_fit.bic:.2f}")
    st.write(f"Log-Likelihood: {model_fit.loglikelihood:.2f}")
# Hi·ªÉn th·ªã t√≥m t·∫Øt m√¥ h√¨nh
col3, col4 = st.columns(2)
with col3:
    st.markdown("### T√≥m t·∫Øt m√¥ h√¨nh GARCH")
    st.write(model_fit.summary())
with col4:
    st.markdown("### Bi·ªÉu ƒë·ªì ph√¢n t√≠ch m√¥ h√¨nh GARCH")
    # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√≠ch m√¥ h√¨nh GARCH
    fig_garch = model_fit.plot(annualize='D')
    st.pyplot(fig_garch)

# D·ª± b√°o bi·∫øn ƒë·ªông trong t∆∞∆°ng lai
forecast = model_fit.forecast(horizon=forecast_period)
print(forecast.mean.tail())
# Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª∑ gi√° h·ªëi ƒëo√°i d·ª± b√°o
st.markdown("## 4. D·ª± b√°o t·ª∑ gi√° h·ªëi ƒëo√°i USD/VND ")
# T·∫°o DataFrame cho k·∫øt qu·∫£ d·ª± b√°o
forecast_df = pd.DataFrame({
    'date': pd.date_range(start=df['date'].iloc[-1] + pd.Timedelta(days=1), periods=forecast_period, freq='D'),
    'forecast': forecast.mean.iloc[-forecast_period:].values[0]
})  
forecast_df['forecast'] = np.exp(forecast_df['forecast']) * df['USDVND'].iloc[-1]  # Chuy·ªÉn ƒë·ªïi t·ª´ log return v·ªÅ gi√° tr·ªã th·ª±c t·∫ø

#Chia l√†m 2 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã d·ª± b√°o v√† t·ª∑ gi√° th·ª±c t·∫ø
col5, col6 = st.columns(2)
with col5:
    st.dataframe(forecast_df, use_container_width=True)
with col6:
    #C·∫Øt b·ªõt d·ªØ li·ªáu df ƒë·ªÉ ch·ªâ l·∫•y 1 nƒÉm g·∫ßn nh·∫•t cho bi·ªÉu ƒë·ªì
    df_recent = df[df['date'] >= (df['date'].max() - pd.Timedelta(days=365))]
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì d·ª± b√°o t·ª∑ gi√° h·ªëi ƒëo√°i
    fig_forecast = go.Figure()
    fig_forecast.add_trace(go.Scatter(x=df_recent['date'], y=df_recent['USDVND'], mode='lines', name='USD/VND (Th·ª±c t·∫ø)'))
    fig_forecast.add_trace(go.Scatter(x=forecast_df['date'], y=forecast_df['forecast'], mode='lines', name='USD/VND (D·ª± b√°o)', line=dict(dash='dash')))
    fig_forecast.update_layout(title='D·ª± b√°o t·ª∑ gi√° h·ªëi ƒëo√°i USD/VND', xaxis_title='Ng√†y', yaxis_title='T·ª∑ gi√° (VND)')
    st.plotly_chart(fig_forecast, use_container_width=True)
